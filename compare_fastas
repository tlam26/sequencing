#!/usr/bin/env python
# determine parentage blocks from the fasta file of a recombinant bacterial strain,
# in comparison to a recipient and donor parental strains
#
# fasta files should be already-aligned and of equal length,
# e.g., as generated by the pipeline fasta_consensus.sh
#
# written by Mark Maienschein-Cline, November 2018
# mmaiensc@uic.edu
# 
# adapted from a script written by Lauren Cowley (drlacowley@gmail.com), provided on 10/9/2018

import sys, os, argparse, traceback

# read in fasta file to array of nucleotides
def read_fasta( file ):
	# open file
	file_in = open(file,'r')
	seq = ""
	for line in file_in:
		if not line.startswith(">"):
			line = line.strip()
			seq+= line
	
	return seq



# main routine
if __name__ == "__main__":
	try:
		# get command-line args
		parser = argparse.ArgumentParser(description="Determine parentage blocks in a recombinant bacterial strain.")
		parser.add_argument('-r', '--recombinant', help="Fasta file of recombinant strain.")
		parser.add_argument('-d', '--donor', help="Fasta file of donor parental strain.")
		parser.add_argument('-c', '--recipient', help="Fasta file of recipient parental strain.")
		parser.add_argument('-o', '--out', help="Output prefix. Outputs are [prefix].snps.txt (list of positions derived from donor strain) and [prefix].blocks.txt (list of inferred blocks derived from donor strain).")
		opts = parser.parse_args()

		if opts.recombinant is None:
			sys.stderr.write("Error: please give recombinant strain.\n")
			parser.print_help()
			exit(1)
		
		if opts.donor is None:
			sys.stderr.write("Error: please give donor strain.\n")
			parser.print_help()
			exit(1)
		
		if opts.recipient is None:
			sys.stderr.write("Error: please give recipient strain.\n")
			parser.print_help()
			exit(1)
		
		if opts.out is None:
			sys.stderr.write("Error: please give output file.\n")
			parser.print_help()
			exit(1)

		# read in fasta files
		recombinant = read_fasta(opts.recombinant)
		donor = read_fasta(opts.donor)
		recipient = read_fasta(opts.recipient)

		# check lengths are equal
		if len(recombinant) != len(donor) or len(recombinant) != len(recipient):
			sys.stderr.write("Error: fasta sequences are different lengths:\nRecombinant: %i, Recipient %i, Donor %i\n" % (len(recombinant), len(donor), len(recipient)) )
			exit(1)
		
		# compare fasta files, round 1:
		# find positions where the recombinant matches the donor, but mismatches the recipient
		# confirm that donor is not N here, and recombinant position is not flanked by N's
		recombinant_matches = []
		for i in range( len(donor) ):
			if recombinant[i] == donor[i] and recombinant[i] != 'N':
				# check if the next/previous base in the recombinant is N
				close_N = 0
				#if i < len(recombinant)-1:
				#	if recombinant[i+1] == 'N':
				#		close_N = 1
				#if i > 0:
				#	if recombinant[i-1] == 'N':
				#		close_N = 1
				
				if recombinant[i] != recipient[i] and recipient[i] != 'N' and close_N == 0:
					recombinant_matches.append(i)

		# also get matches for the recipient strain
		recipient_matches = []
		for i in range( len(donor) ):
			if recipient[i] != donor[i] and recipient[i] != 'N' and recombinant[i] != 'N':
				recipient_matches.append(i)

		# extend matches based on the range of recipient mismatches from the donor
		recombinant_stop = []
		recombinant_start = []
		if len(recombinant_matches) > 0:
			recombinant_start.append(recombinant_matches[0])

		for i in range( len(recombinant_matches)-1 ):
			for every in recipient_matches:
				if every > recombinant_matches[i] and every < recombinant_matches[i+1]:
					if recombinant_matches[i] not in recombinant_stop:
						recombinant_stop.append(recombinant_matches[i])
						recombinant_start.append(recombinant_matches[i+1])

		if len(recombinant_matches) > 0:
			recombinant_stop.append(recombinant_matches[-1])

		# print out list of SNPs
		snpname = opts.out + ".snps.txt"
		fileout = open(snpname,'w')
		for i in range( len(recombinant_matches) ):
			fileout.write("%i\n" % recombinant_matches[i])

		fileout.close()

		blockname = opts.out + ".blocks.txt"
		fileout = open(blockname,'w')
		for i in range( len(recombinant_stop) ):
			fileout.write("%i\t%i\n" % (recombinant_start[i], recombinant_stop[i]))

		fileout.close()

	except Exception as e:
		traceback.print_exc(file=sys.stderr)
