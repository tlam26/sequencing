#!/bin/bash
# Make a consensus fasta by replacing SNP positions in a reference genome based on read alignments
# University of Illinois at Chicago
# October 30, 2018

set -e

# read in arguments
ref_fa=""
fq1=""
fq2=""
out=""
path=""

# usage statement
usage="USAGE:
	-f  reference genome (fasta)

	-r1 read 1 data (fastq)
	
	-r2 read 2 data (fastq) (optional)

	-o  output prefix. Output files will be:
		[prefix].fa		Consensus fasta file (main result)
		[prefix].vcf.gz		Genotype calls for all genomic positions VCF format
		[prefix].filtered.vcf	Filtered VCF file with just the SNPs used to make the consensus fasta file
		[prefix].vcfStats.txt	Summary of the SNP analysis used to create the consensus fasta file
		[prefix].bam		Alignments, in BAM format
		[prefix].bam.bai	Index for BAM file

	OPTIONAL:

	-path  path to executable scripts, if not in PATH

	DEPENDENCIES: must be in your PATH (bash profile), or in the executable directory given to -path
		bwa
		samtools v1.4 or higher
		bcftools v1.2 or higher
		make_pseudosequence2_mmc.pl
	
	NOTE: fastq data can be plain fastq or gzipped (fastq.gz). I highly recommend gzipped.
"

# parse command line
for (( i=1; i<= $#; i++)); do
	j=$((i+1))
	arg="${!i}"
	val="${!j}"
	case $arg in
		"-f")
			ref_fa="$val"
			i=$j
			;;
		"-r1")
			fq1="$val"
			i=$j
			;;
		"-r2")
			fq2="$val"
			i=$j
			;;
		"-o")
			out="$val"
			i=$j
			;;
		"-path")
			path="$val"
			i=$j
			;;
	*)
		echo -e "Error: flag $arg not recognized.\n$usage"
		exit 1
	esac
done

# check required arguments
if [ "$ref_fa" = "" ]; then
	echo -e "Error: set -f\n$usage"
	exit 1
fi
if [ "$fq1" = "" ]; then
	echo -e "Error: set -r1\n$usage"
	exit 1
fi
# check that output names are defined
if [ "$out" = "" ]; then
	echo -e "Error: set -o\n$usage"
	exit 1
fi

#
# utility functions
#
# check if file $1 exists
# if it does, add it to the file list, and make a note in the manifest that the sample name is $3 and the type is $4
# file list and manifest based on $2
function check_file {
	if [ ! -f "$1" ]; then
	   (>&2 echo "Error: file $1 does not exist")
	   exit 1
	fi
}

# find executable for $1: either itself (if in your PATH), or the $path/$1
function find_util {
	check=$(which $1 2> /dev/null | wc -l | awk '{print $1}')
	if [ "$check" = 1 ]; then
		echo "$1"
	elif [ "$path" != "" ]; then
		check=$(ls $path/$1 2> /dev/null | wc -l | awk '{print $1}')
		if [ "$check" = 1 ]; then
			echo "$path/$1"
		else
			(>&2 echo "Error: script $1 can't be found")
			exit 1
		fi
	else
		(>&2 echo "Error: script $1 can't be found")
		exit 1
	fi
}

#
# start the pipeline
#
# load dependencies
bwa=$(find_util bwa)
samtools=$(find_util samtools)
bcftools=$(find_util bcftools)
make_pseudosequence2=$(find_util make_pseudosequence2_mmc.pl)

# check samtools v1.4 or greater
minversion="1.4"
version=$($samtools --version | head -1 | awk '{print $2}')
check=$(echo "$minversion $version" | awk '{if($1>$2) print "bad"; else print "good"}')
if [ "$check" = "bad" ]; then
	echo "Error: use samtools version $minversion or greater. Your version is $version."
	exit 1
fi

# check bcftools v1.2 or greater
minversion="1.2"
version=$($bcftools --version | head -1 | awk '{print $2}')
check=$(echo "$minversion $version" | awk '{if($1>$2) print "bad"; else print "good"}')
if [ "$check" = "bad" ]; then
	echo "Error: use bcftools version $minversion or greater. Your version is $version."
	exit 1
fi

# make fasta index
echo -e "\n#\n# Building fasta index\n#"
cp $ref_fa $out.ref.fa
$samtools faidx $out.ref.fa
ref_fa="$out.ref.fa"

# make bwa index
echo -e "\n#\n# Building BWA index\n#"
check_file $ref_fa
$bwa index -p $out.BWAIndex $ref_fa &> /dev/null
check_file "$out.BWAIndex.amb"
check_file "$out.BWAIndex.ann"
check_file "$out.BWAIndex.bwt"
check_file "$out.BWAIndex.pac"
check_file "$out.BWAIndex.sa"

# running genome alignments
echo -e "\n#\n# Mapping reads to reference, and sorting and removing PCR duplicates\n#"
$bwa mem $out.BWAIndex $fq1 $fq2 | $samtools view -b - | $samtools sort - | $samtools rmdup - $out.bam
check_file "$out.bam"

# index bam files
$samtools index $out.bam
check_file "$out.bam.bai"

# running variant calling
echo -e "\n#\n# Variant calling\n#"
$samtools mpileup -Ou -f $ref_fa $out.bam | $bcftools call -c -O v -o $out.vcf

# make fasta file
echo -e "\n#\n# Generating consensus fasta file\n#"
$make_pseudosequence2 $ref_fa $out.vcf $out > $out.vcfStats.txt

# clean up
rm $out.ref.fa
rm $out.ref.fa.fai
rm $out.BWAIndex.*
gzip $out.vcf

echo -e "\n#\n# Done!\n#\n"




